Полиморфизм - Возможность через единый интерфейс работать с объектами разных классов
ПЕРВОЕ ВИДЕО:
Название класса должна быть с заглавной буквы class Point:

Point.color = ‘black’ #для изменения атрибута класса

Point.circle  #для выводы значения или добавления нового

Point.__dict__  #для вывода всех значений

a = Point()  #для создания экземпляра класса

type(a) #для того, чтобы узнать кому принадлежит объект
type(a) == Point #True
isinstance(a, Point) #True
a.__dict__ #для того, чтобы узнать атрибуты касающегося только объекта

a.color  #для вывода значений атрибута объекта

setattr(Point, ‘prop’, 1) #для добавления или изменения переменной где первый аргумент это объект или класс, а второй имя новой переменной, третий аргумент это значение для заданной переменной

getattr(Point, ‘a’, False) #для вывода значения класса или объекта, этот метод полезен тем, что при добавлении третьего аргумента можно избежать ошибки

del Point.prop #для удаления атрибута с класса или же объекта, но если удалить несуществующий атрибут, то выведется ошибка

hasattr(Point, ‘prop’) #для того, чтобы узнать есть ли этот атрибут в классе или в объекте. Выведется True или False

delattr(Point, ‘type_pt’) #для удаления атрибута

когда удаляется атрибут объекта, то она принимает атрибут класса

Point.__doc__ #для вывода комментария внутри класса

ВТОРОЕ ВИДЕО:


def set_coords(self): #чтобы добавить метод

pt.set_coords # чтобы выявить метод должны написать без круглых скобок

def set_coords(self, x, y):
    self.x = x
    self.y = y
#чтобы работать с локальными аргументами

ТРЕТЬЕ ВИДЕО

МАГИЧЕСКИЕ МЕТОДЫ:
__init__ #инициализатор объекта класса
__del__ #финализатор класса

def __init__(self, x=0, y=0)
    self.x = x
    self.y = y
#чтобы все работало по дефолту и не выдовалась ошибка

ЧЕТВЕРТОЕ ВИДЕО

def __new__(cls, *args, **kwargs): #правильное и общение наисание этого магического метода

return super().__new__(cls) #для ссылки

__new__() #вызывается перед созданием объекта класса
__init__() #вызывается сразу после создания объекта класса

cls #ссылается на текущий экземпляр класса
self #ссылается на объект класса

__instance = None #начало паттерна SINGLETON
   
__instance = None

    def __new__(cls, *args, **kwargs):
        if cls.__instance is None:
            cls.__instance = super().__new__(cls)
        
        return cls.__instance
    
    def __del__(self):
        DataBase.__instance = None
паттерн проектирования Singleton

ШЕСТОЕ ВИДЕО

attribute (без одного или двух подчеркиваний вначале) - публичное свойство (PUBLIC)
_attribute (с одним подчеркиванием) - режим доступа PROTECTED (служит для обрашения внутри класса и во всех дочерних классах)
__attribute (с двумя подчеркиваниями) - режим доступа PRIVATE (служит для обращения только внутри класса) 

интерфейсные методы:
    сеттер
    геттер

Инкапсуляция защищает ваши классы от случайных изменений или удалений,
а также способствует повторному использованию и удобству сопровождению когда
оно используется для скрытия внутренного представлния или состояния объекта от внешнего мира

модуль accessify
@private 
@protected 

СЕДЬМОЕ ВИДЕО

__setattr__(self, key, value) - автоматически вызывается при изменении свойства key класса;

__getattribute__(self, item) - автоматически вызывается при получении свойства класса с именем item;
без return object.__getattribute__(self, item) не работает

__getatt__(self, item) - автоматически вызывается при получении несуществующего свойства item класса;

__delattr__(self, item) - автоматически вызывается при удалении свойства item(не важно: существует оно или нет).

ВОСЬМОЕ ВИДЕО

Вместо того чтобы ограничивать создание экземпляров класса, он делится состоянием между всеми экземплярами. 
Таким образом, все экземпляры класса имеют одно и то же состояние.

def __init__(self):
    self.__dict__ = self.__shared_attrs


ОДИННАДЦАТОЕ ВИДЕО

data descriptor
non-data descriptor

ЧЕТЫРНАДЦАТОЕ ВИДЕО

dunder-методы(от английского double underscope)
__str__() - для отображения информации об объекте класса для пользователей (например, для функций print, str)

__rep__() - для отображения информации об объекте класса в режиме отладки(для разработчиков)


15-ВИДЕО
__add__() для операции сложения
__sub__() для операции вычитания
__mul__() для операции умножения
__truediv__() для операции деления

x+y  __add__(self, other)
x-y  __sub__(self, other)
x*y  __mul__(self, other)
x/y  __truediv__(self, other)
x//y __floordiv__(self, other)
x%y  __mod__(self, other)
x+=y __iadd__(self, other)
x-=y __isub__(self, other)
x*=y __imul__(self, other)
x/=y __itruediv__(self, other)
x//=y __ifloordiv(self, other)
x%=y __imod__(self, other)

16-ВИДЕО МАГИЧЕСКИЕ МЕТОДЫ СРАВНЕНИЙ
__eq__() для равенства == ***
__ne__() для неравенства !=
__it__() для операторв меньше < ***
__le__() для оператора меньше или равно <= ***
__gt__() для оператора больше >
__ge__() для оператора больше или равно >=

c1 != c2  not(c1==c2)
c1 > c2   c2 < c1
c1 >= c2  c2 <= c1

19-ВИДЕО
__getitem__(self, item) получение значения по ключу item
__setitem__(self,key, value) запись значения value по ключу key
__del__item(self,key)

20-ВИДЕО
__iter__(self) получение итератора для перебора объекта
__next__(self) переход к следующему значению и его считывание
range(start,stop,step) арифметическая последовательность